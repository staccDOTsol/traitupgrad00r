/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
 import { serialize, deserialize, deserializeUnchecked } from "borsh";

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { NewUriArgs, newUriArgsBeet } from '../types/NewUriArgs'
class Assignable {
  constructor(properties: any) {
    Object.keys(properties).map((key) => {
      // @ts-ignore
      return (this[key] = properties[key]);
    });
  }
}

// Our instruction payload vocabulary
class Payload extends Assignable {}


/**
 * @category Instructions
 * @category ProcessSubmitUri
 * @category generated
 */
export type ProcessSubmitUriInstructionArgs = {
  args: NewUriArgs
}
/**
 * @category Instructions
 * @category ProcessSubmitUri
 * @category generated
 */
// Borsh needs a schema describing the payload
const payloadSchema = new Map([
  [
    Payload,
    {
      kind: "struct",
      fields: [
        ["uri", "string"]
      ],
    },
  ],
]);

export const processSubmitUriStruct = new beet.FixableBeetArgsStruct<
  ProcessSubmitUriInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', newUriArgsBeet],
  ],
  'ProcessSubmitUriInstructionArgs'
)
/**
 * Accounts required by the _processSubmitUri_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [] fanout
 * @property [] wallet
 * @property [_writable_] newUri
 * @property [] rentKey
 * @category Instructions
 * @category ProcessSubmitUri
 * @category generated
 */
export type ProcessSubmitUriInstructionAccounts = {
  authority: web3.PublicKey
  fanout: web3.PublicKey
  wallet: web3.PublicKey
  newUri: web3.PublicKey
  systemProgram?: web3.PublicKey
  rentKey: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const processSubmitUriInstructionDiscriminator = [
  197, 152, 150, 67, 210, 138, 175, 153,
]

/**
 * Creates a _ProcessSubmitUri_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ProcessSubmitUri
 * @category generated
 */
export function createProcessSubmitUriInstruction(
  accounts: ProcessSubmitUriInstructionAccounts,
  args: ProcessSubmitUriInstructionArgs,
  programId = new web3.PublicKey('84zHEoSwTo6pb259RtmeYQ5KNStik8pib815q7reZjdx')
) {
  const mint = new Payload({
   uri: args.args.uri
  });
  const data = Buffer.from(serialize(payloadSchema, mint));

  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.fanout,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.wallet,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.newUri,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rentKey,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data:data as Buffer,
  })
  return ix
}
